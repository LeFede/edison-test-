---
export const prerender = false;
import Layout from '../layouts/Layout.astro';
import { type AxiosResponse } from "axios";
import { aResult, type Result } from "@volpe/utils";
import { type Category, type Course, type IAcademy } from "../env.d";
import Market from "../components/Market/Market.astro";
import api from '../../axios';
import { ACADEMY_ID } from 'astro:env/server';

const currentTime = new Date().toLocaleTimeString();
Astro.response.headers.set('Cache-Control', 'public, maxage=100, s-maxage=300, stale-while-revalidate=100');

const [coursesResult, academyResult, categoriesResult] = await Promise.all([
  api.get[aResult](`/courses/market/${ACADEMY_ID}`) as unknown as Result<AxiosResponse<Course[]>>,
  api.get[aResult](`/academies/${ACADEMY_ID}`) as unknown as Result<AxiosResponse<IAcademy>>,
  api.get[aResult](`/categories`) as unknown as Result<AxiosResponse<Category[]>>,
]);

const [coursesError, axiosResponseCourses] = coursesResult;
if (coursesError || !axiosResponseCourses) throw coursesError || new Error("Error fetching courses");

const [academyError, axiosResponseAcademy] = academyResult;
if (academyError || !axiosResponseAcademy) throw academyError || new Error("Error fetching academy");

const [categoriesError, axiosResponseCategories] = categoriesResult;
if (categoriesError || !axiosResponseCategories) throw categoriesError || new Error("Error fetching categories");

const { data: courses } = axiosResponseCourses;
const { data: academy } = axiosResponseAcademy;
const { data: allCategories } = axiosResponseCategories;

let categories = allCategories?.filter((e: any) => e.academyId === academy?.id);
---

<Layout academy={academy}>
  hola<br/>
  {currentTime}
  <br/>
  
  <h1 class="h-[1000px]">Im√°genes Optimizadas</h1>
  <Market courses={courses} categories={categories} />
</Layout>

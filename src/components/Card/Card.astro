---
import type { Course } from '../../env';
import LiveSvg from "./LiveSvg.tsx"
import RecordSvg from "./RecordSvg.tsx"
import ClockSvg from "./ClockSvg.tsx"
import CalendarSvg from "./CalendarSvg.tsx"
import SoonSvg from "./SoonSvg.tsx"
import formatearFecha from "./formatearFecha"
import User from './User.astro';
interface Props {
  course: Course;
}
const {course} = Astro.props
const {urlLanding: href, users, config, name: courseName, events} = course
const {startTime} = events[0]
const {value: categoryName, htmlColor: categoryColor} = course.category
const {isAsync} = course.config
const isAsyncText = isAsync ? "Curso grabado" : "Curso en vivo"
const cardBackgroundAlpha = "10"
---
<a 
  href={href} 
  target="_blank" 
  rel="noreferrer noopener nofollow" 
  style={{backgroundColor: categoryColor+cardBackgroundAlpha}}
  aria-label={`ver curso ${courseName}`}
  class="grid grid-cols-4 rounded-lg p-4 grid-rows-[30px_min-content_min-content_auto] min-h-64 border-gray-300 border"
> 
  <span class="col-span-2 line-clamp-1 text-xs w-fit h-fit text-white px-2 py-0.5 rounded-xl" style={{backgroundColor: categoryColor}}>
    {categoryName}
  </span>

  <span class="col-span-2 line-clamp-1 text-xs border border-black w-fit h-fit justify-self-end px-2 py-0.5 rounded-xl flex gap-1 items-center ">
    {isAsync ? <RecordSvg/> : <LiveSvg/>}
    {isAsyncText}
  </span>

  <p class="col-span-4 line-clamp-3 text-xl font-semibold leading-6 mb-6 mt-2">{courseName}</p>

  <div class="col-span-4 gap-4 flex flex-col mb-6">
    {users.map(user => <User user={user}/>)}
  </div>

  <p class="col-span-4 self-end text-sm flex gap-1 items-center"><CalendarSvg/>{formatearFecha(startTime)}</p>
</a>

